---
import WritingLayout from "@layouts/writing-layout.astro";
import { ScrollProgress } from "@components/misc";
import { type CollectionEntry, getCollection } from "astro:content";
import { getReadingTime } from "@utils/index";
import PrivateLayout from "@layouts/private-layout.astro";
const posts = await getCollection("writing");
type Props = CollectionEntry<"writing">;

const { slug } = Astro.params;
const post = posts.find((page: Props) => page.slug === slug);

if (!post) return Astro.redirect("/404");

const { Content } = await post.render();
const readingTime = getReadingTime(post.body);

// 从环境变量获取配置
const COOKIE_NAME = import.meta.env.PRIVATE_CONTENT_COOKIE_NAME;
const isVerified = Astro.cookies.get(COOKIE_NAME)?.value === "verified";

// 处理密码验证
if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const password = data.get("password");
    
    // 从环境变量获取密码
    const correctPassword = import.meta.env.PRIVATE_CONTENT_PASSWORD;
    
    if (password === correctPassword) {
      // 设置 cookie，7天有效期
      Astro.cookies.set(COOKIE_NAME, "verified", {
        path: "/",
        maxAge: 60 * 60 * 24 * 7
      });
      return Astro.redirect(Astro.url.pathname);
    }
  } catch (error) {
    console.error("Error processing password:", error);
  }
}
---

{
  post.data.isPrivate && !isVerified ? (
    <PrivateLayout
      title="私密文章"
      description="私密文章"
      placeholder="这是一篇私密文章的占位内容。实际内容已被隐藏。This is a placeholder for private content. The actual content is hidden."
    >
      <Content />
    </PrivateLayout>
  ) : (
    <WritingLayout {...post.data} readingTime={readingTime}>
      <Content />
      <ScrollProgress />
    </WritingLayout>
  )
}
